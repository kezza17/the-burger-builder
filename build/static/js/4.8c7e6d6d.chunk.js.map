{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css","containers/Auth/Auth.js"],"names":["input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","connect","state","loading","auth","error","isAuthenticated","token","buildingBurger","burgerBuilder","building","authRedirectPath","dispatch","onAuth","email","password","isSignup","actions","onSetAuthRedirectPath","useState","type","placeholder","validation","required","isEmail","valid","minLength","authForm","setAuthForm","setIsSignup","useEffect","formElementsArray","id","config","form","formElement","event","controlName","updatedControls","updateObject","target","checkValidity","inputChangedHandler","errorMessage","message","authRedirect","to","Auth","onSubmit","preventDefault","btnType","clicked"],"mappings":"oHAAA,sCAuDeA,IApDD,SAACC,GACb,IAAIC,EAAe,KACbC,EAAe,CAACC,IAAQC,cAM9B,OAJIJ,EAAMK,SAAWL,EAAMM,gBAAkBN,EAAMO,SACjDL,EAAaM,KAAKL,IAAQM,SAGpBT,EAAMU,aACZ,IAAM,QACJT,EAAe,yCACbU,UAAWT,EAAaU,KAAK,MACzBZ,EAAMa,cAFG,CAGbC,MAAOd,EAAMc,MACbC,SAAUf,EAAMgB,WAClB,MACF,IAAM,WACJf,EAAe,4CACbU,UAAWT,EAAaU,KAAK,MACzBZ,EAAMa,cAFG,CAGbC,MAAOd,EAAMc,MACbC,SAAUf,EAAMgB,WAClB,MACF,IAAM,SACJf,EACE,4BACEU,UAAWT,EAAaU,KAAK,KAC7BE,MAAOd,EAAMc,MACbC,SAAUf,EAAMgB,SACfhB,EAAMa,cAAcI,QAAQC,KAAI,SAAAC,GAAM,OACrC,4BAAQC,IAAKD,EAAOL,MAAOA,MAAOK,EAAOL,OACtCK,EAAOE,kBAKhB,MACF,QACEpB,EAAe,yCACbU,UAAWT,EAAaU,KAAK,MACzBZ,EAAMa,cAFG,CAGbC,MAAOd,EAAMc,SAGnB,OACE,yBAAKH,UAAWR,IAAQmB,OACtB,2BAAOX,UAAWR,IAAQoB,OAAQvB,EAAMwB,OACvCvB,K,oBCjDPwB,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,MAAQ,qBAAqB,aAAe,4BAA4B,QAAU,yB,oBCAjID,EAAOC,QAAU,CAAC,KAAO,qB,qJC6IVC,uBAjBS,SAAAC,GACtB,MAAO,CACLC,QAASD,EAAME,KAAKD,QACpBE,MAAOH,EAAME,KAAKC,MAClBC,gBAAsC,OAArBJ,EAAME,KAAKG,MAC5BC,eAAgBN,EAAMO,cAAcC,SACpCC,iBAAkBT,EAAME,KAAKO,qBAIN,SAAAC,GACzB,MAAO,CACLC,OAAQ,SAACC,EAAOC,EAAUC,GAAlB,OAA+BJ,EAASK,IAAaH,EAAOC,EAAUC,KAC9EE,sBAAuB,kBAAMN,EAASK,IAA4B,UAIvDhB,EAnIF,SAAA3B,GAAU,IAAD,EACY6C,mBAAS,CACvCL,MAAO,CACL9B,YAAa,QACbG,cAAe,CACbiC,KAAM,QACNC,YAAa,iBAEfjC,MAAO,GACPkC,WAAY,CACVC,UAAU,EACVC,SAAS,GAEXC,OAAO,EACP5C,SAAS,GAEXkC,SAAU,CACR/B,YAAa,QACbG,cAAe,CACbiC,KAAM,WACNC,YAAa,YAEfjC,MAAO,GACPkC,WAAY,CACVC,UAAU,EACVG,UAAW,GAEbD,OAAO,EACP5C,SAAS,KA5BO,mBACb8C,EADa,KACHC,EADG,OAgCYT,oBAAS,GAhCrB,mBAgCbH,EAhCa,KAgCHa,EAhCG,KAkCZrB,EAA4DlC,EAA5DkC,eAAgBG,EAA4CrC,EAA5CqC,iBAAkBO,EAA0B5C,EAA1B4C,sBAE1CY,qBAAU,WACHtB,GAAuC,MAArBG,GACrBO,MAED,CAACV,EAAgBG,EAAkBO,IAEtC,IAoBMa,EAAoB,GAC1B,IAAK,IAAIrC,KAAOiC,EACdI,EAAkBjD,KAAK,CACrBkD,GAAItC,EACJuC,OAAQN,EAASjC,KAIrB,IAAIwC,EAAOH,EAAkBvC,KAAI,SAAA2C,GAAW,OAC1C,kBAAC,IAAD,CACEzC,IAAKyC,EAAYH,GACjBhD,YAAamD,EAAYF,OAAOjD,YAChCG,cAAegD,EAAYF,OAAO9C,cAClCC,MAAO+C,EAAYF,OAAO7C,MAC1BT,SAAUwD,EAAYF,OAAOR,MAC7B7C,eAAgBuD,EAAYF,OAAOX,WACnCzC,QAASsD,EAAYF,OAAOpD,QAC5BS,QAAS,SAAC8C,GAAD,OArCe,SAACA,EAAOC,GAClC,IAAMC,EAAkBC,YAAaZ,EAAD,eACjCU,EAAcE,YAAaZ,EAASU,GAAc,CACjDjD,MAAOgD,EAAMI,OAAOpD,MACpBqC,MAAOgB,YAAcL,EAAMI,OAAOpD,MAAOuC,EAASU,GAAaf,YAC/DzC,SAAS,MAGb+C,EAAYU,GA6BUI,CAAoBN,EAAOD,EAAYH,UAG3D1D,EAAM6B,UACR+B,EAAO,kBAAC,IAAD,OAGT,IAAIS,EAAe,KAEfrE,EAAM+B,QACRsC,EACE,2BAAIrE,EAAM+B,MAAMuC,UAIpB,IAAIC,EAAe,KAKnB,OAJIvE,EAAMgC,kBACRuC,EAAe,kBAAC,IAAD,CAAUC,GAAIxE,EAAMqC,oBAInC,yBAAK1B,UAAWR,IAAQsE,MACrBF,EACAF,EACD,0BAAMK,SAlDY,SAACZ,GACrBA,EAAMa,iBACN3E,EAAMuC,OAAOc,EAASb,MAAM1B,MAAOuC,EAASZ,SAAS3B,MAAO4B,KAiDvDkB,EACD,kBAAC,IAAD,CAAQgB,QAAQ,WAAhB,WAEF,kBAAC,IAAD,CACEC,QAlDwB,WAC5BtB,GAAab,IAkDTkC,QAAQ,UAFV,aAE8BlC,EAAW,SAAW","file":"static/js/4.8c7e6d6d.chunk.js","sourcesContent":["import React from 'react'\r\nimport classes from './Input.module.css'\r\n\r\nconst input = (props) => {\r\n  let inputElement = null\r\n  const inputClasses = [classes.InputElement]\r\n\r\n  if (props.invalid && props.shouldValidate && props.touched) {\r\n    inputClasses.push(classes.Invalid)\r\n  }\r\n\r\n  switch (props.elementType) {\r\n    case ('input'):\r\n      inputElement = <input \r\n        className={inputClasses.join(' ')} \r\n        {...props.elementConfig} \r\n        value={props.value}\r\n        onChange={props.changed} />\r\n      break\r\n    case ('textarea'):\r\n      inputElement = <textarea \r\n        className={inputClasses.join(' ')} \r\n        {...props.elementConfig} \r\n        value={props.value}\r\n        onChange={props.changed} />\r\n      break\r\n    case ('select'):\r\n      inputElement = (\r\n        <select \r\n          className={inputClasses.join(' ')} \r\n          value={props.value}\r\n          onChange={props.changed} >\r\n          {props.elementConfig.options.map(option => (\r\n            <option key={option.value} value={option.value}>\r\n              {option.displayValue}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      )\r\n      break\r\n    default: \r\n      inputElement = <input \r\n        className={inputClasses.join(' ')} \r\n        {...props.elementConfig} \r\n        value={props.value} />\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Input}>\r\n      <label className={classes.Label}>{props.label}</label>\r\n      {inputElement}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default input","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1XmeP\",\"Label\":\"Input_Label__1f49a\",\"InputElement\":\"Input_InputElement__29Oia\",\"Invalid\":\"Input_Invalid__1AZI7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__3eqbG\"};","import React, { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nimport Input from '../../components/UI/Input/Input'\r\nimport Button from '../../components/UI/Button/Button'\r\nimport classes from './Auth.module.css'\r\nimport * as actions from '../../store/actions/index'\r\nimport Spinner from '../../components/UI/Spinner/Spinner'\r\nimport { updateObject, checkValidity } from '../../shared/utility'\r\n\r\nconst Auth = props => {\r\n  const [authForm, setAuthForm] = useState({\r\n    email: {\r\n      elementType: 'input',\r\n      elementConfig: {\r\n        type: 'email',\r\n        placeholder: 'Email Address'\r\n      },\r\n      value: '',\r\n      validation: {\r\n        required: true,\r\n        isEmail: true\r\n      },\r\n      valid: false,\r\n      touched: false\r\n    },\r\n    password: {\r\n      elementType: 'input',\r\n      elementConfig: {\r\n        type: 'password',\r\n        placeholder: 'Password'\r\n      },\r\n      value: '',\r\n      validation: {\r\n        required: true,\r\n        minLength: 6\r\n      },\r\n      valid: false,\r\n      touched: false\r\n    }\r\n  })\r\n\r\n  const [isSignup, setIsSignup] = useState(true)\r\n\r\n  const { buildingBurger, authRedirectPath, onSetAuthRedirectPath } = props\r\n  \r\n  useEffect(() => {\r\n    if (!buildingBurger && authRedirectPath !== \"/\") {\r\n      onSetAuthRedirectPath()\r\n    }\r\n  }, [buildingBurger, authRedirectPath, onSetAuthRedirectPath])\r\n\r\n  const inputChangedHandler = (event, controlName) => {\r\n    const updatedControls = updateObject(authForm, {\r\n      [controlName]: updateObject(authForm[controlName], {\r\n        value: event.target.value,\r\n        valid: checkValidity(event.target.value, authForm[controlName].validation),\r\n        touched: true\r\n      })\r\n    })\r\n    setAuthForm(updatedControls)\r\n  }\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n    props.onAuth(authForm.email.value, authForm.password.value, isSignup)\r\n  }\r\n\r\n  const switchAuthModeHandler = () => {\r\n    setIsSignup(!isSignup)\r\n  }\r\n\r\n  const formElementsArray = []\r\n  for (let key in authForm) {\r\n    formElementsArray.push({\r\n      id: key,\r\n      config: authForm[key]\r\n    })\r\n  }\r\n\r\n  let form = formElementsArray.map(formElement => (\r\n    <Input\r\n      key={formElement.id}\r\n      elementType={formElement.config.elementType} \r\n      elementConfig={formElement.config.elementConfig}\r\n      value={formElement.config.value}\r\n      invalid={!formElement.config.valid}\r\n      shouldValidate={formElement.config.validation}\r\n      touched={formElement.config.touched}\r\n      changed={(event) => inputChangedHandler(event, formElement.id)} />\r\n  ))\r\n\r\n  if (props.loading) {\r\n    form = <Spinner />\r\n  }\r\n\r\n  let errorMessage = null\r\n\r\n  if (props.error) {\r\n    errorMessage = (\r\n      <p>{props.error.message}</p>\r\n    )\r\n  }\r\n\r\n  let authRedirect = null\r\n  if (props.isAuthenticated) {\r\n    authRedirect = <Redirect to={props.authRedirectPath} />\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Auth}>\r\n      {authRedirect}\r\n      {errorMessage}\r\n      <form onSubmit={submitHandler}>\r\n        {form}\r\n        <Button btnType=\"Success\">SUBMIT</Button>\r\n      </form>\r\n      <Button \r\n        clicked={switchAuthModeHandler}\r\n        btnType=\"Danger\">SWITCH TO {isSignup ? 'SIGNIN' : 'SIGNUP'}</Button>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    isAuthenticated: state.auth.token !== null,\r\n    buildingBurger: state.burgerBuilder.building,\r\n    authRedirectPath: state.auth.authRedirectPath\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\r\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth)"],"sourceRoot":""}