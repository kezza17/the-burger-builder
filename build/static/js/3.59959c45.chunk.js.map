{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","checkoutSummary","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","connect","state","ings","burgerBuilder","price","totalPrice","loading","order","token","auth","userId","dispatch","onOrderBurger","orderData","actions","withErrorHandler","useState","name","type","placeholder","validation","required","valid","street","zipCode","minLength","maxLength","country","email","deliveryMethod","orderForm","setOrderForm","formIsValid","setFormIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","formElementsArray","id","config","form","onSubmit","formElement","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","inputChangedHandler","disabled","Spinner","ContactData","axios","purchased","summary","to","purchasedRedirect","history","goBack","replace","path","match","component"],"mappings":"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","file":"static/js/3.59959c45.chunk.js","sourcesContent":["import React from 'react'\r\nimport classes from './Input.module.css'\r\n\r\nconst input = (props) => {\r\n  let inputElement = null\r\n  const inputClasses = [classes.InputElement]\r\n\r\n  if (props.invalid && props.shouldValidate && props.touched) {\r\n    inputClasses.push(classes.Invalid)\r\n  }\r\n\r\n  switch (props.elementType) {\r\n    case ('input'):\r\n      inputElement = <input \r\n        className={inputClasses.join(' ')} \r\n        {...props.elementConfig} \r\n        value={props.value}\r\n        onChange={props.changed} />\r\n      break\r\n    case ('textarea'):\r\n      inputElement = <textarea \r\n        className={inputClasses.join(' ')} \r\n        {...props.elementConfig} \r\n        value={props.value}\r\n        onChange={props.changed} />\r\n      break\r\n    case ('select'):\r\n      inputElement = (\r\n        <select \r\n          className={inputClasses.join(' ')} \r\n          value={props.value}\r\n          onChange={props.changed} >\r\n          {props.elementConfig.options.map(option => (\r\n            <option key={option.value} value={option.value}>\r\n              {option.displayValue}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      )\r\n      break\r\n    default: \r\n      inputElement = <input \r\n        className={inputClasses.join(' ')} \r\n        {...props.elementConfig} \r\n        value={props.value} />\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Input}>\r\n      <label className={classes.Label}>{props.label}</label>\r\n      {inputElement}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default input","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1XmeP\",\"Label\":\"Input_Label__1f49a\",\"InputElement\":\"Input_InputElement__29Oia\",\"Invalid\":\"Input_Invalid__1AZI7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__PXaq5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__3rpgZ\"};","import React from 'react'\r\n\r\nimport Burger from '../../Burger/Burger'\r\nimport Button from '../../UI/Button/Button'\r\nimport classes from './CheckoutSummary.module.css'\r\n\r\nconst checkoutSummary = (props) => {\r\n  return (\r\n    <div className={classes.CheckoutSummary}>\r\n      <h1>We hope it tastes good!</h1>\r\n      <div style={{width: '100%', margin: 'auto'}}>\r\n        <Burger ingredients={props.ingredients} />\r\n      </div>\r\n      <Button \r\n        btnType='Danger'\r\n        clicked={props.checkoutCancelled} >CANCEL</Button>\r\n      <Button \r\n        btnType='Success'\r\n        clicked={props.checkoutContinued} >CONTINUE</Button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default checkoutSummary","import React, { useState } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport Button from '../../../components/UI/Button/Button'\r\nimport classes from './ContactData.module.css'\r\nimport axios from '../../../axios-orders'\r\nimport Spinner from '../../../components/UI/Spinner/Spinner'\r\nimport Input from '../../../components/UI/Input/Input'\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler'\r\nimport * as actions from '../../../store/actions/index'\r\nimport { updateObject, checkValidity } from '../../../shared/utility'\r\n\r\nconst ContactData = props => {\r\n  const [orderForm, setOrderForm] = useState({\r\n    name: {\r\n      elementType: 'input',\r\n      elementConfig: {\r\n        type: 'text',\r\n        placeholder: 'Your Name'\r\n      },\r\n      value: '',\r\n      validation: {\r\n        required: true,\r\n      },\r\n      valid: false,\r\n      touched: false\r\n    },\r\n    street: {\r\n      elementType: 'input',\r\n      elementConfig: {\r\n        type: 'text',\r\n        placeholder: 'Street'\r\n      },\r\n      value: '',\r\n      validation: {\r\n        required: true,\r\n      },\r\n      valid: false,\r\n      touched: false\r\n    },\r\n    zipCode: {\r\n      elementType: 'input',\r\n      elementConfig: {\r\n        type: 'text',\r\n        placeholder: 'ZIP Code'\r\n      },\r\n      value: '',\r\n      validation: {\r\n        required: true,\r\n        minLength: 5,\r\n        maxLength: 5\r\n      },\r\n      valid: false,\r\n      touched: false\r\n    },\r\n    country: {\r\n      elementType: 'input',\r\n      elementConfig: {\r\n        type: 'text',\r\n        placeholder: 'Country'\r\n      },\r\n      value: '',\r\n      validation: {\r\n        required: true,\r\n      },\r\n      valid: false,\r\n      touched: false\r\n    },\r\n    email: {\r\n      elementType: 'input',\r\n      elementConfig: {\r\n        type: 'email',\r\n        placeholder: 'Your Email'\r\n      },\r\n      value: '',\r\n      validation: {\r\n        required: true,\r\n      },\r\n      valid: false,\r\n      touched: false\r\n    },\r\n    deliveryMethod: {\r\n      elementType: 'select',\r\n      elementConfig: {\r\n        options: [\r\n          {value: 'fastest', displayValue: 'Fastest'},\r\n          {value: 'cheapest', displayValue: 'Cheapest'}\r\n        ]\r\n      },\r\n      value: 'fastest',\r\n      validation: {},\r\n      valid: true\r\n    }\r\n  })\r\n  const [formIsValid, setFormIsValid] = useState(false)\r\n\r\n  const orderHandler = (event) => {\r\n    event.preventDefault()\r\n    const formData = {}\r\n    for (let formElementIdentifier in orderForm) {\r\n      formData[formElementIdentifier] = orderForm[formElementIdentifier].value\r\n    }\r\n    const order = {\r\n      ingredients: props.ings,\r\n      price: props.price,\r\n      orderData: formData,\r\n      userId: props.userId\r\n    }\r\n    props.onOrderBurger(order, props.token)\r\n  }\r\n\r\n  const inputChangedHandler = (event, inputIdentifier) => {\r\n    const updatedFormElement = updateObject(orderForm[inputIdentifier], {\r\n      value: event.target.value,\r\n      valid: checkValidity(event.target.value, this.state.validation),\r\n      touched: true\r\n    })\r\n    const updatedOrderForm = updateObject(orderForm, {\r\n      [inputIdentifier]: updatedFormElement\r\n    })\r\n    \r\n    let formIsValid = true\r\n    for (let inputIdentifier in updatedOrderForm) {\r\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid\r\n    }\r\n    setOrderForm(updatedOrderForm)\r\n    setFormIsValid(formIsValid)\r\n  }\r\n\r\n  const formElementsArray = []\r\n  for (let key in orderForm) {\r\n    formElementsArray.push({\r\n      id: key,\r\n      config: orderForm[key]\r\n    })\r\n  }\r\n\r\n  let form = (\r\n    <form onSubmit={orderHandler}>\r\n      {formElementsArray.map(formElement => (\r\n        <Input \r\n          key={formElement.id}\r\n          elementType={formElement.config.elementType} \r\n          elementConfig={formElement.config.elementConfig}\r\n          value={formElement.config.value}\r\n          invalid={!formElement.config.valid}\r\n          shouldValidate={formElement.config.validation}\r\n          touched={formElement.config.touched}\r\n          changed={(event) => inputChangedHandler(event, formElement.id)} />\r\n      ))}\r\n      <Button btnType='Success' disabled={!formIsValid} clicked={orderHandler}>0RDER</Button>\r\n    </form>\r\n  )\r\n  if (props.loading) {\r\n    form = <Spinner />\r\n  }\r\n  return (\r\n    <div className={classes.ContactData}>\r\n      <h4>Enter your Contact Data</h4>\r\n      {form}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredients,\r\n    price: state.burgerBuilder.totalPrice,\r\n    loading: state.order.loading,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios))","import React from 'react'\r\nimport { Route, Redirect } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\n\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary'\r\nimport ContactData from './ContactData/ContactData'\r\n\r\nconst Checkout = props => {\r\n\r\n  const checkoutCancelledHandler = () => {\r\n    props.history.goBack()\r\n  }\r\n\r\n  const checkoutContinuedHandler = () => {\r\n    props.history.replace('/checkout/contact-data')\r\n  }\r\n\r\n  let summary = <Redirect to='/'/>\r\n  if (props.ings ) {\r\n    const purchasedRedirect = props.purchased ? <Redirect to='/'/> : null\r\n    summary = (\r\n      <div>\r\n        {purchasedRedirect}\r\n        <CheckoutSummary \r\n          ingredients={props.ings}\r\n          checkoutCancelled={checkoutCancelledHandler}\r\n          checkoutContinued={checkoutContinuedHandler} />\r\n        <Route \r\n          path={props.match.path + '/contact-data'} \r\n          component={ContactData} />\r\n      </div>\r\n    )\r\n  }\r\n  return summary\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredients,\r\n    purchased: state.order.purchased\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Checkout)"],"sourceRoot":""}